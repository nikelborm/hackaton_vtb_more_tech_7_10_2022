version: '3.9'
services:
  nginx-prod:
    image: "nikelborm/home:${PROJECT_NAME}-nginx-prod"
    restart: always
    depends_on:
      - backend-prod
      - postgres-admin
    build:
      context: ./frontend/
      target: static
      args:
        - PROD_EXTERNAL_NGINX_HTTP_PORT=${PROD_EXTERNAL_NGINX_HTTP_PORT}
        - PROD_EXTERNAL_NGINX_HTTPS_PORT=${PROD_EXTERNAL_NGINX_HTTPS_PORT}
    environment:
      - TZ=${TZ}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
      - PROD_INNER_NGINX_HTTP_PORT=${PROD_INNER_NGINX_HTTP_PORT}
      - PROD_INNER_NGINX_HTTPS_PORT=${PROD_INNER_NGINX_HTTPS_PORT}
      - PROD_INNER_BACKEND_HTTP_SERVER_PORT=${PROD_INNER_BACKEND_HTTP_SERVER_PORT}
      - PROD_INNER_BACKEND_WS_SERVER_PORT=${PROD_INNER_BACKEND_WS_SERVER_PORT}
    ports:
      - "${PROD_EXTERNAL_NGINX_HTTP_PORT}:${PROD_INNER_NGINX_HTTP_PORT}/tcp"
      - "${PROD_EXTERNAL_NGINX_HTTPS_PORT}:${PROD_INNER_NGINX_HTTPS_PORT}/tcp"
    networks:
      nginx-back-net:
      nginx-pgadmin-net:
      mynet:
        ipv4_address: 192.168.55.10

    # volumes:
    #   - ./data/certbot/conf:/etc/letsencrypt
    #   - ./data/certbot/www:/var/www/certbot

  # certbot:
  #   image: certbot/certbot
  #   command: certonly -n -d local.host --webroot --agree-tos --email kolya007.klass@gmail.com -w /var/www/certbot
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #     - ./data/certbot/logs:/var/log/letsencrypt/

  backend-prod:
    image: "nikelborm/home:${PROJECT_NAME}-backend-prod"
    restart: always
    depends_on:
      - postgres-prod
    build:
      context: ./backend/
      target: production
    environment:
      - TZ=${TZ}
      - PROJECT_ENV_TYPE=${PROJECT_ENV_TYPE}
      - SERVER_PORT=${PROD_INNER_BACKEND_HTTP_SERVER_PORT}
      - WEB_SOCKET_SERVER_PORT=${PROD_INNER_BACKEND_WS_SERVER_PORT}
      - BOOTSTRAP_MODE=${BOOTSTRAP_MODE}
      - MOCK_SCRIPT_NAME=${MOCK_SCRIPT_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - USER_PASSWORD_HASH_SALT=${USER_PASSWORD_HASH_SALT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_TYPEORM_LOGGING_MODE=${DATABASE_TYPEORM_LOGGING_MODE}
    volumes:
      - type: bind
        source: ./backend/src/modules/infrastructure/
        target: /app/src/modules/infrastructure/
    networks:
      - nginx-back-net
      - back-db-net

  postgres-prod:
    image: postgres
    restart: always
    command: "-c default_text_search_config=pg_catalog.russian"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - type: volume
        source: postgres-prod-data
        target: /var/lib/postgresql/data
    networks:
      - back-db-net
      - db-pgadmin-net

  postgres-admin:
    image: dpage/pgadmin4:latest
    depends_on:
      - postgres-prod
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - nginx-pgadmin-net
      - db-pgadmin-net

volumes:
  postgres-prod-data:

# when i will really want to use https and ssl
# article how to setup certbot and let's encrypt
# https://pentacent.medium.com/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71
# online nginx configuration
# https://www.digitalocean.com/community/tools/nginx
# TODO: research posibility to use serial device and run smarthouse
# https://www.losant.com/blog/how-to-access-serial-devices-in-docker

networks:
  nginx-back-net: {}
  back-db-net: {}
  nginx-pgadmin-net: {}
  db-pgadmin-net: {}
  mynet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.55.0/24
          gateway: 192.168.55.1
